version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    depends_on:
      - auth-service
      - shipment-service
      - tracking-service
      - analytics-service

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=logistics_db
      - JWT_SECRET=your_jwt_secret
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
    depends_on:
      - mysql
    networks:
      - logistics-network

  # Shipment Service
  shipment-service:
    build:
      context: ./services/shipment-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=logistics_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin
    depends_on:
      - mysql
      - redis
      - rabbitmq
    networks:
      - logistics-network

  # Tracking Service
  tracking-service:
    build:
      context: ./services/tracking-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=logistics_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin
      - JWT_SECRET=your-secret-key
      - JWT_EXPIRES_IN=1h
    depends_on:
      - mysql
      - redis
      - rabbitmq
      - auth-service

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
      - DB_HOST=mysql
      - DB_USER=root
      - DB_PASSWORD=password
      - DB_NAME=logistics_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin
      - SONARQUBE_URL=http://sonarqube:9000
      - SONARQUBE_TOKEN=${SONARQUBE_TOKEN}
    depends_on:
      - mysql
      - redis
      - rabbitmq
      - sonarqube
    networks:
      - logistics-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=logistics_db
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - logistics-network

  # Redis Cache
  redis:
    image: redis:6.0-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - logistics-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - logistics-network

  # SonarQube
  sonarqube:
    image: sonarqube:latest
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - logistics-network

  # SonarQube Scanner
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli
    volumes:
      - ./:/usr/src
    depends_on:
      - sonarqube
    networks:
      - logistics-network

volumes:
  mysql_data:
  redis_data:
  rabbitmq_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

networks:
  logistics-network:
    driver: bridge 